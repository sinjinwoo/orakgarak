# ===============================================
# product
# ===============================================

# ===============================================
# server port
# ===============================================
server.port=${SERVER_PORT:8080}

# ===============================================
# mysql
# ===============================================
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://${DB_HOST_PROD:orakgaraki-mysql}:${DB_PORT_PROD:3306}/${DB_NAME_PROD:orakgaraki}?useSSL=true&requireSSL=true&serverTimezone=Asia/Seoul&characterEncoding=UTF-8&useUnicode=true
spring.datasource.username=${DB_USERNAME_PROD}
spring.datasource.password=${DB_PASSWORD_PROD}

# ===============================================
# JPA
# ===============================================
spring.sql.init.mode=always
spring.sql.init.continue-on-error=true
spring.jpa.defer-datasource-initialization=true
spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.jdbc.batch_size=50

# ===============================================
# data source
# ===============================================
spring.datasource.hikari.maximum-pool-size=30
spring.datasource.hikari.minimum-idle=10
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000

# ===============================================
# Redis
# ===============================================
spring.data.redis.host=${REDIS_HOST:orakgaraki-redis}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.password=${REDIS_PASSWORD}
spring.session.timeout=7200
spring.session.redis.namespace=orakgaraki:session:prod
spring.cache.type=redis
spring.cache.redis.time-to-live=1800000
spring.cache.redis.cache-null-values=false

# ===============================================
# 운영 환경 로깅 설정
# ===============================================
logging.config=classpath:log4j2-prod.xml
logging.file.path=${LOG_FILE_PATH}

# OAuth2 디버깅을 위한 임시 로그 설정
logging.level.org.springframework.boot.autoconfigure.security.oauth2=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.boot.autoconfigure.security=DEBUG
logging.level.org.springframework.security.web=DEBUG
logging.level.org.springframework.web.servlet=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.com.ssafy.lab.orak=DEBUG
logging.level.root=INFO

# ===============================================
# JWT 설정 (운영 환경)
# ===============================================
jwt.secret=${JWT_SECRET}
jwt.expiration=${JWT_EXPIRATION}
jwt.refresh-expiration=${JWT_REFRESH_EXPIRATION}

# ===============================================
# OAuth2 설정 (운영 환경)
# ===============================================
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri=${GOOGLE_REDIRECT_URI}

# OAuth2 리다이렉트
app.oauth2.redirect-uri=${OAUTH2_REDIRECT_URI}

# ===============================================
# AWS S3 & EventBridge 설정 (운영 환경)
# ===============================================
spring.cloud.aws.credentials.access-key=${AWS_ACCESS_KEY_ID}
spring.cloud.aws.credentials.secret-key=${AWS_SECRET_ACCESS_KEY}
spring.cloud.aws.region.static=${AWS_REGION}
spring.cloud.aws.s3.bucket=${AWS_S3_BUCKET}

# EventBridge 설정
aws.eventbridge.bus-name=${AWS_EVENTBRIDGE_BUS_NAME}
aws.eventbridge.source=orakgaraki.s3.upload
aws.eventbridge.detail-type=S3 Object Upload Event

# EventBridge 웹훅 토큰
orak.eventbridge.webhook.token=${ORAK_EVENTBRIDGE_WEBHOOK_TOKEN}

# ===============================================
# Kafka 설정 (운영 환경)
# ===============================================
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS}

# Kafka Producer 설정
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.acks=all
spring.kafka.producer.retries=3
spring.kafka.producer.batch-size=16384
spring.kafka.producer.buffer-memory=33554432
spring.kafka.producer.properties.linger.ms=5
spring.kafka.producer.compression-type=gzip

# Kafka Consumer 설정
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP}
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.properties.session.timeout.ms=30000
spring.kafka.consumer.properties.heartbeat.interval.ms=3000
spring.kafka.consumer.max-poll-records=100
spring.kafka.listener.ack-mode=manual

# Kafka 토픽 설정
kafka.topics.upload-events=upload-events
kafka.topics.processing-status=processing-status
kafka.topics.processing-results=processing-results

# DLQ Pattern Topics
kafka.topics.upload-events-retry=upload-events-retry
kafka.topics.upload-events-dlq=upload-events-dlq
kafka.topics.processing-status-dlq=processing-status-dlq
kafka.topics.processing-results-dlq=processing-results-dlq

# ===============================================
# 외부 서비스 URL (운영 환경)
# ===============================================
python.service.url=${PYTHON_SERVICE_URL}
app.profile.image.base-url=${PROFILE_IMAGE_BASE_URL}

# ===============================================
# CORS 설정 (운영 환경)
# ===============================================
spring.web.cors.allowed-origins=${CORS_ALLOWED_ORIGINS}

# ===============================================
# Actuator & Monitoring (운영 환경)
# ===============================================
management.endpoints.web.exposure.include=health,info,prometheus,metrics
management.endpoint.health.show-details=when-authorized
management.endpoints.web.base-path=/actuator
management.server.port=8091
management.info.env.enabled=true

# Prometheus 메트릭 설정
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.metrics.tags.application=orakgaraki
management.metrics.tags.environment=prod
management.metrics.enable.all=true

# Actuator Basic Auth
actuator.user=${ACTUATOR_USER}
actuator.password=${ACTUATOR_PASSWORD}
actuator.role-name=${ACTUATOR_ROLE_NAME:ACTUATOR}

# ===============================================
# Swagger 설정 (운영 환경)
# ===============================================
springdoc.swagger-ui.enabled=${SWAGGER_ENABLED}
springdoc.api-docs.enabled=${SWAGGER_ENABLED}

# ===============================================
# Mattermost Webhook (운영 환경)
# ===============================================
mattermost.webhook.url=${MATTERMOST_WEBHOOK_URL}

# ===============================================
# 보안 설정 (운영 환경)
# ===============================================
server.servlet.session.cookie.secure=true
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.same-site=strict