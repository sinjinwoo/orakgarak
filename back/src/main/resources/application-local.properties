# ===============================================
# 로컬 개발 환경 설정
# ===============================================

# ===============================================
# 로컬 MySQL 설정 (Docker)
# ===============================================
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://${DB_HOST_LOCAL}:${DB_PORT_LOCAL}/${DB_NAME_LOCAL}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul&characterEncoding=UTF-8&useUnicode=true
spring.datasource.username=${DB_USERNAME_LOCAL}
spring.datasource.password=${DB_PASSWORD_LOCAL}

# 로컬 개발용 HikariCP 설정 (빠른 연결)
spring.datasource.hikari.connection-timeout=10000
spring.datasource.hikari.validation-timeout=3000
spring.datasource.hikari.initialization-fail-timeout=10000

# ===============================================
# 로컬 개발용 JPA 설정
# ===============================================
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect


# 데이터 초기화 (로컬)
spring.sql.init.mode=always
spring.sql.init.continue-on-error=true
spring.jpa.defer-datasource-initialization=true

# ===============================================
# 로컬 Redis 설정 (Docker)
# ===============================================
spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_PORT}
spring.data.redis.password=${REDIS_PASSWORD:}
spring.session.timeout=3600
spring.session.redis.namespace=orakgaraki:session:local
spring.cache.type=redis
spring.cache.redis.time-to-live=600000
spring.cache.redis.cache-null-values=false

# ===============================================
# 로컬 개발용 로깅 설정
# ===============================================
logging.config=classpath:log4j2-local.xml
logging.file.path=${LOG_FILE_PATH:./logs/orakgaraki.log}

# 개발용 상세 로깅
logging.level.com.zaxxer.hikari=DEBUG
logging.level.org.springframework.jdbc.datasource=DEBUG
logging.level.javax.sql.DataSource=DEBUG
logging.level.com.ssafy.lab.orak=DEBUG

# ===============================================
# 로컬 개발 도구 설정
# ===============================================
spring.devtools.restart.enabled=true
spring.devtools.livereload.enabled=true

# ===============================================
# 로컬 외부 서비스 연동 설정
# ===============================================
# JWT 설정 (로컬)
jwt.secret=${JWT_SECRET}
jwt.expiration=${JWT_EXPIRATION}
jwt.refresh-expiration=${JWT_REFRESH_EXPIRATION}

# OAuth2 설정 (로컬)
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri=${GOOGLE_REDIRECT_URI}
app.oauth2.redirect-uri=${OAUTH2_REDIRECT_URI}

# AWS 설정 (로컬 테스트용)
spring.cloud.aws.credentials.access-key=${AWS_ACCESS_KEY_ID}
spring.cloud.aws.credentials.secret-key=${AWS_SECRET_ACCESS_KEY}
spring.cloud.aws.region.static=${AWS_REGION}
spring.cloud.aws.s3.bucket=${AWS_S3_BUCKET}
aws.eventbridge.bus-name=${AWS_EVENTBRIDGE_BUS_NAME}
aws.eventbridge.source=orakgaraki.s3.upload
aws.eventbridge.detail-type=S3 Object Upload Event

# EventBridge 웹훅 (로컬 테스트용)
orak.eventbridge.webhook.token=${ORAK_EVENTBRIDGE_WEBHOOK_TOKEN}

# Kafka 설정 (로컬)
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS}
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.listener.ack-mode=manual

# Kafka 토픽 설정
kafka.topics.upload-events=upload-events
kafka.topics.processing-status=processing-status
kafka.topics.processing-results=processing-results

# DLQ 및 재시도 토픽 추가
kafka.topics.upload-events-retry=upload-events-retry
kafka.topics.upload-events-dlq=upload-events-dlq
kafka.topics.processing-status-dlq=processing-status-dlq
kafka.topics.processing-results-dlq=processing-results-dlq

# ===============================================
# 로컬 외부 서비스 URL
# ===============================================
python.service.url=${PYTHON_SERVICE_URL}
app.profile.image.base-url=${PROFILE_IMAGE_BASE_URL}

# ===============================================
# 로컬 CORS 설정
# ===============================================
spring.web.cors.allowed-origins=${CORS_ALLOWED_ORIGINS}

# ===============================================
# 로컬 모니터링 설정 (개발용)
# ===============================================
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoints.web.base-path=/actuator
management.server.port=8091
management.info.env.enabled=true

# 메트릭 설정 (로컬)
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.metrics.tags.application=orakgaraki
management.metrics.tags.environment=local
management.metrics.enable.all=true

# Actuator 인증 (로컬)
actuator.user=${ACTUATOR_USER}
actuator.password=${ACTUATOR_PASSWORD}
actuator.role-name=${ACTUATOR_ROLE_NAME}

# ===============================================
# 로컬 Swagger 설정 (개발용 활성화)
# ===============================================
springdoc.swagger-ui.enabled=true
springdoc.api-docs.enabled=true
springdoc.swagger-ui.doc-expansion=list
springdoc.swagger-ui.default-models-expand-depth=3


# ===============================================
# 로컬 웹훅 설정 (테스트용)
# ===============================================
mattermost.webhook.url=${MATTERMOST_WEBHOOK_URL}


